#include <iostream>
using namespace std;

void main() {
    setlocale(LC_ALL, "Russian");
    srand(time(NULL));
    cout << "Введите количество строк матрицы, но не менее 3: ";
    int row;
    cin >> row;
    cout << "\n\nВведите количество столбцов матрицы, но не менее 7: ";
    int col;
    cin >> col;
    if (row < 3) {
        row = 3;
    }
    if (col < 7) {
        col = 7;
    }
    int** arr = new int* [row];
    for (int i = 0;i < col;i++) {
        arr[i] = new int[col];
    }
    for (int i = 0;i < row;i++) {
        for (int j = 0;j < col;j++) {
            arr[i][j] = rand() % 10;
        }
    }
    cout << "\n\n";
    for (int i = 0;i < row;i++) {
        for (int j = 0;j < col;j++) {
            cout << arr[i][j] << "\t";
        }
        cout << "\n";
    }
    int* maxMinArr = new int[row];
    int* rowMaxArr = new int[row];
    for (int i = 0;i < row;i++) {
        int min = 10;
        int max = 0;
        for (int j = 0;j < col;j++) {
            if (arr[i][j] < min) {
                min = arr[i][j];
            }
            if (arr[i][j]>max) {
                max = arr[i][j];
            }
        }
        rowMaxArr[i] = max;
        maxMinArr[i] = min;
    }
    cout << "\n\n";
    int maxMin = maxMinArr[0];
    for (int i = 0;i < row;i++) {
        cout << maxMinArr[i] << "\t";
        if (maxMinArr[i]>maxMin) {
            maxMin = maxMinArr[i];
        }
    }
    cout << "\n\n"<<"Оптимальное решение согласно критерию Вальда: "<<maxMin<<"\n\n";
    int* colMaxArr = new int[col];
    for (int i = 0;i < col;i++) {
        int max = 0;
        for (int j = 0;j < row;j++) {
            if (arr[j][i] > max) {
                max = arr[j][i];
            }
        }
        colMaxArr[i] = max;
    }
    cout << "\n\nМаксимальные элементы каждого столбца:"<<"\n\n";
    for (int i = 0;i < col;i++) {
        cout << colMaxArr[i] << "\t";
    }
    int** savagesArr = new int*[row];
    for (int i = 0;i < col;i++) {
        savagesArr[i] = new int[col];
    }
    int k = 0;
    for (int i = 0;i < col;i++) {
        for (int j = 0;j < row;j++) {
            savagesArr[j][i] = colMaxArr[k]-arr[j][i];
        }
        k++;
    }
    cout << "\n\nВоспользовавшись критерием Сэвиджа построим матрицу риска:\n\n";
    for (int i = 0;i < row;i++) {
        for (int j = 0;j < col;j++) {
            cout <<savagesArr[i][j] << "\t";
        }
        cout << "\n";
    }
    int* maxArr = new int[row];
    for (int i = 0;i < row;i++) {
        int max = 0;
        for (int j = 0;j < col;j++) {
            if (savagesArr[i][j] > max) {
                max = savagesArr[i][j];
            }
        }
        maxArr[i] = max;
    }
    cout << "\n\n";
    int min = 10;
    for (int i = 0;i < row;i++) {
        cout << maxArr[i] << "\t";
        if (maxArr[i] < min) {
            min = maxArr[i];
        }
    }
    cout << " - Согласно критерию Сэвиджа определяем минимальный риск: "<<min<<"\n\n"<<"Чтобы воспользоваться критерием Гурвица, определим коэффициент оптимистичности равным 0,5:\n\n";
    double* hurwitzsArr = new double[row];
    double m = 0.5;
    double max = 0;
    int indexMax = 0;
    for (int i = 0;i < row;i++) {
        hurwitzsArr[i] = (m* maxMinArr[i])+((1.0 - m)* rowMaxArr[i]);
        cout << hurwitzsArr[i] << "\t";
        if (hurwitzsArr[i] > max) {
            max = hurwitzsArr[i];
            indexMax = i+1;
        }
    }
    cout << "\n\nMax: " << max << " - Значит оптимальной стратегией будет " << indexMax<<"\n\n";
}